"""
Client pour communiquer avec Ollama
"""

import requests
import json
from typing import Optional, Dict, Any
from ..config.settings import settings
from ..utils.app_mapper import app_mapper


class OllamaClient:
    """Client pour l'API Ollama"""
    
    def __init__(self, base_url: str = None, model: str = None):
        self.base_url = base_url or settings.ollama.base_url
        self.model = model or settings.ollama.model
        self.available = False
        self.last_error = None
        
        # V√©rifier la connexion au d√©marrage
        self.check_connection()
    
    def check_connection(self) -> bool:
        """V√©rifie si Ollama est accessible"""
        try:
            response = requests.get(f"{self.base_url}/api/tags", timeout=3)
            self.available = response.status_code == 200
            
            if self.available:
                print("‚úÖ Ollama connect√© !")
                self.last_error = None
            else:
                self.last_error = f"HTTP {response.status_code}"
                print(f"‚ùå Ollama non accessible: {self.last_error}")
                
        except requests.exceptions.ConnectionError:
            self.available = False
            self.last_error = "Connexion refus√©e"
            print("‚ùå Ollama non accessible: connexion refus√©e")
        except requests.exceptions.Timeout:
            self.available = False
            self.last_error = "Timeout de connexion"
            print("‚ùå Ollama non accessible: timeout")
        except Exception as e:
            self.available = False
            self.last_error = str(e)
            print(f"‚ùå Erreur connexion Ollama: {e}")
        
        return self.available
    
    def get_available_models(self) -> list:
        """R√©cup√®re la liste des mod√®les disponibles"""
        if not self.available:
            return []
        
        try:
            response = requests.get(f"{self.base_url}/api/tags", timeout=5)
            if response.status_code == 200:
                data = response.json()
                return [model['name'] for model in data.get('models', [])]
        except Exception as e:
            print(f"Erreur r√©cup√©ration mod√®les: {e}")
        
        return []
    
    def generate_suggestion(self, app_name: str, context: str) -> str:
        """G√©n√®re une suggestion contextuelle"""
        if not self.available:
            return f"üîå Ollama non connect√© ({self.last_error or 'Inconnu'})"
        
        # Obtenir la cat√©gorie de l'application
        app_category = app_mapper.get_app_category(app_name)
        
        # Cr√©er un prompt adapt√©
        prompt = self._create_contextual_prompt(app_name, context, app_category)
        
        try:
            payload = {
                "model": self.model,
                "prompt": prompt,
                "stream": False,
                "options": {
                    "temperature": settings.ollama.temperature,
                    "num_predict": settings.ollama.max_tokens
                }
            }
            
            response = requests.post(
                f"{self.base_url}/api/generate",
                json=payload,
                timeout=settings.ollama.timeout
            )
            
            if response.status_code == 200:
                result = response.json()
                suggestion = result.get("response", "").strip()
                
                if suggestion:
                    return self._clean_suggestion(suggestion)
                else:
                    return "ü§î Pas de suggestion pour le moment"
            else:
                return f"‚ùå Erreur Ollama: HTTP {response.status_code}"
                
        except requests.exceptions.Timeout:
            return "‚è±Ô∏è Timeout - Ollama surcharg√©"
        except requests.exceptions.ConnectionError:
            self.available = False
            return "üîå Connexion perdue avec Ollama"
        except Exception as e:
            print(f"Erreur g√©n√©ration: {e}")
            return "üîÑ Erreur lors de la g√©n√©ration"
    
    def _create_contextual_prompt(self, app_name: str, context: str, category: str) -> str:
        """Cr√©e un prompt adapt√© au contexte"""
        base_prompt = f"""Tu es un assistant de productivit√© qui aide l'utilisateur selon son contexte actuel.

Application: {app_name}
Cat√©gorie: {category}
Contexte: {context}

Donne UN conseil pratique et sp√©cifique (1-2 phrases maximum) pour cette situation.
"""
        
        # Prompts sp√©cialis√©s par cat√©gorie
        category_prompts = {
            'Navigation': """
Exemples de conseils pour navigateurs:
- "Essaie Ctrl+Shift+T pour rouvrir un onglet ferm√© !"
- "Utilise Ctrl+L pour aller directement √† la barre d'adresse."
- "Ctrl+Shift+N pour ouvrir une fen√™tre de navigation priv√©e."
""",
            'D√©veloppement': """
Exemples de conseils pour d√©veloppement:
- "N'oublie pas Ctrl+Shift+P pour la palette de commandes !"
- "Utilise Ctrl+` pour ouvrir/fermer le terminal int√©gr√©."
- "F12 pour d√©boguer ton code pas √† pas."
""",
            'Bureautique': """
Exemples de conseils pour bureautique:
- "Ctrl+S pour sauvegarder r√©guli√®rement ton travail !"
- "F7 pour v√©rifier l'orthographe de ton document."
- "Utilise les styles pour une mise en forme coh√©rente."
""",
            'Syst√®me': """
Exemples de conseils pour syst√®me:
- "Tape 'cls' pour nettoyer l'√©cran."
- "Utilise Tab pour l'autocompl√©tion."
- "Fl√®che haut pour rappeler la derni√®re commande."
""",
            'Communication': """
Exemples de conseils pour communication:
- "Utilise @nom pour mentionner quelqu'un."
- "Ctrl+Shift+M pour couper/remettre le micro."
- "Organise tes conversations avec des dossiers."
"""
        }
        
        category_specific = category_prompts.get(category, "")
        
        return base_prompt + category_specific + "\nR√©ponds avec un √©moji et un conseil court:"
    
    def _clean_suggestion(self, suggestion: str) -> str:
        """Nettoie la r√©ponse de l'IA"""
        # Supprimer les pr√©fixes courants
        prefixes_to_remove = [
            "Voici un conseil :",
            "Conseil :",
            "Astuce :",
            "üí°",
            "Suggestion :"
        ]
        
        cleaned = suggestion
        for prefix in prefixes_to_remove:
            if cleaned.startswith(prefix):
                cleaned = cleaned[len(prefix):].strip()
        
        # Limiter la longueur
        if len(cleaned) > 200:
            cleaned = cleaned[:197] + "..."
        
        return cleaned
    
    def test_model(self, test_prompt: str = "Dis bonjour en une phrase.") -> Dict[str, Any]:
        """Teste le mod√®le avec un prompt simple"""
        if not self.available:
            return {"success": False, "error": "Ollama non disponible"}
        
        try:
            payload = {
                "model": self.model,
                "prompt": test_prompt,
                "stream": False,
                "options": {"num_predict": 50}
            }
            
            response = requests.post(
                f"{self.base_url}/api/generate",
                json=payload,
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                return {
                    "success": True,
                    "response": result.get("response", ""),
                    "eval_count": result.get("eval_count", 0),
                    "eval_duration": result.get("eval_duration", 0)
                }
            else:
                return {"success": False, "error": f"HTTP {response.status_code}"}
                
        except Exception as e:
            return {"success": False, "error": str(e)}